@page "/migrate-local-to-server"

@inject ILogger<MigrateLocalToServer> Logger
@inject IJSRuntime JS
@using System.IO
@implements IDisposable

<h3>Palworld Player Migrate Tool</h3>
<p>
    This tool can help you to migrate your local Palworld save to dedicated server save
    (use <a target="_blank" href="https://github.com/xNul/palworld-host-save-fix">this</a> tool)
</p>
<p>
    Please read <a target="_blank" href="https://github.com/xNul/palworld-host-save-fix/blob/main/README.md">THIS</a>
    document carefully before starting the conversion operation.
</p>

<div style="@(isLoading ? "display: none" : "")">
    
    <h4>Step 1. Map the old player GUID to the new player GUID</h4>
    <div class="input-group mb-3">
        <span class="input-group-text">from</span>
        <input type="text" class="form-control" placeholder="old guid" aria-label="old guid" @bind-value="oldGuid">
        <span class="input-group-text">to</span>
        <input type="text" class="form-control" placeholder="new guid" aria-label="new guid" @bind-value="newGuid">
        <button class="btn btn-primary" @onclick="() => AddGuidPair(oldGuid, newGuid)">Add</button>
    </div>
    <div class=" mb-3">
        @foreach (var (from, to) in GuidMapping)
        {
            <div class="input-group">
                <span class="input-group-text">from</span>
                <input disabled type="text" class="form-control" placeholder="old guid" aria-label="old guid" value="@from">
                <span class="input-group-text">to</span>
                <input disabled type="text" class="form-control" placeholder="new guid" aria-label="new guid" value="@to">
                <button class="btn btn-danger" @onclick="() => Remove(from)">Remove</button>
            </div>
        }
    </div>

    <h4>Step 2. Upload the archive of your saved files and start processing</h4>
    <div class="mb-3">
        <div class="input-group">
            <InputFile disabled="@UploadNotReady" OnChange="@ProcessFile" class="form-control" id="save-file-uploader" accept="application/zip" />
        </div>
        @if (UploadNotReady)
        {
            <div class="form-text">Before uploading the save archive, at least map one GUID pair</div>
        }
        else
        {
            <div class="form-text">NOTE: The zip archive must include your save folder</div>
        }
    </div>

    <h4>Step 3. The converted save archive will be downloaded automatically</h4>
</div>
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

@if (ProcessLogs.Count > 0)
{
    <div class="progress" role="progressbar" aria-label="Process progress" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: @progress%">@LastLog</div>
    </div>

    <h4>Process logs</h4>
    <div class="mb-3">
        <pre style="white-space: pre-wrap; word-wrap: break-word; word-break: break-word;">
            @foreach (var log in ProcessLogs)
            {
                <code>@log</code>
                <br />
            }
        </pre>
    </div>
}

@code {

    private List<IBrowserFile> loadedFiles = [];
    private List<string> ProcessLogs = [];
    private long maxFileSize = 51200000;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string oldGuid = "";
    private string newGuid = "";

    private bool UploadNotReady => GuidMapping.Count == 0;

    private void AddGuidPair(string from, string to)
    {
        if (string.IsNullOrWhiteSpace(from) || string.IsNullOrWhiteSpace(to))
        {
            return;
        }

        GuidMapping[from] = to;
    }

    private void Remove(string from)
    {
        GuidMapping.Remove(from);
    }
}
